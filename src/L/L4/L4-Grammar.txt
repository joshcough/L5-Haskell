p ::= (e (l (x ...) e) ...)

e ::= (let ([x e]) e)
    | (if e e e)
    | (e e ...)
    | (new-array e e)
    | (new-tuple e ...)
    | (aref e e)
    | (aset e e e)
    | (alen e)
    | (begin e e)
    | (print e)
    | (make-closure l e)
    | (closure-proc e)
    | (closure-vars e)
    | (biop e e)
    | (pred e)
    | v

v :: = x | l | num
biop ::= + | - | * | < | <= | =
pred ::= number? | a? ;; a? tests to see if the argument is an array or a tuple
