((let ((f_0 (new-tuple 0))) (let ((_l4__7 (new-tuple f_0))) (let ((_l4__8 (make-closure :l5lbl_0 _l4__7))) (let ((_l4__6 (aset f_0 0 _l4__8))) (let ((l5var_1_1 (aref f_0 0))) (let ((_l4__9 (closure-proc l5var_1_1))) (let ((_l4__10 (closure-vars l5var_1_1))) (_l4__9 _l4__10 10)))))))) (:l5lbl_0 (frees_2 x_3) (let ((f_4 (aref frees_2 0))) (if x_3 (let ((l5var_0_5 (aref f_4 0))) (let ((_l4__13 (closure-proc l5var_0_5))) (let ((_l4__14 (closure-vars l5var_0_5))) (let ((_l4__15 (- x_3 1))) (let ((_l4__16 (_l4__13 _l4__14 _l4__15))) (let ((_l4__17 (new-tuple))) (:l4__11 _l4__16 _l4__17))))))) (let ((_l4__18 (print x_3))) (let ((_l4__19 (new-tuple))) (:l4__11 _l4__18 _l4__19)))))) (:l4__11 (_l4__12 frees) _l4__12))