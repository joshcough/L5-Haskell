((let ((construct_object (make-closure :l5lbl_2 (new-tuple)))) (let ((access_object (make-closure :l5lbl_3 (new-tuple)))) (let ((mutate_object (make-closure :l5lbl_4 (new-tuple)))) (let ((my_object (let ((l5var_2 construct_object)) ((closure-proc l5var_2) (closure-vars l5var_2) 5)))) (begin (print (let ((l5var_3 access_object)) ((closure-proc l5var_3) (closure-vars l5var_3) my_object))) (begin (let ((l5var_4 mutate_object)) ((closure-proc l5var_4) (closure-vars l5var_4) my_object 6)) (print (let ((l5var_5 access_object)) ((closure-proc l5var_5) (closure-vars l5var_5) my_object))))))))) (:l5lbl_2 (frees initial_data) (let ((object (new-tuple 0))) (begin (aset object 0 (new-tuple initial_data (make-closure :l5lbl_0 (new-tuple object)) (make-closure :l5lbl_1 (new-tuple object)))) (aref object 0)))) (:l5lbl_0 (frees) (let ((object (aref frees 0))) (aref (aref object 0) 0))) (:l5lbl_1 (frees new_data) (let ((object (aref frees 0))) (aset (aref object 0) 0 new_data))) (:l5lbl_3 (frees object) (let ((l5var_0 (aref object 1))) ((closure-proc l5var_0) (closure-vars l5var_0)))) (:l5lbl_4 (frees object new_data) (let ((l5var_1 (aref object 2))) ((closure-proc l5var_1) (closure-vars l5var_1) new_data))))