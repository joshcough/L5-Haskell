;; This is wrong, there's a bug somewhere in the recursion
;; Should produce an answer though
(((rax <- 0)
  (rdi <- 0)
  (call :ack)
  (call :decode)
  (rax <- (print rax)) ;; A(0,0) = 1
  (rax <- 3)
  (rdi <- 0)
  (call :ack)
  (call :decode)
  (rax <- (print rax)) ;; A(3,0) = 4
  (rax <- 1)
  (rdi <- 3)
  (call :ack) 
  (call :decode)
  (rax <- (print rax)) ;; A(1,3) = 5
  (rax <- 3)
  (rdi <- 3)
  (call :ack)
  (call :decode)
  (rax <- (print rax))) ;; A(3,3) = 61
 (:ack
  (cjump rax = 0 :ret :cont)
  :ret
  (rax <- rdi)
  (rax += 1)
  (return)
  :cont
  (cjump rdi = 0 :ack1 :ackfull)
  :ack1
  (rax -= 1)
  (rdi <- 1)
  (tail-call :ack)
  :ackfull
  (rsi <- rax)
  (rdi -= 1)
  (call :ack)
  (rdi <- rax)
  (rax <- rsi)
  (rax -= 1)
  (tail-call :ack))
 (:decode
  (rax *= 2)
  (rax += 1)
  (return)))
