; Linked list test - allocates a linked list, then prints it.
((
  ; Construct a linked list structure containing 1 -> 2 -> 3 -> 4 -> 5 ( -> 9999 )
  ; Each cell in the structure is a list containing a value and the address of the next cell.
  ; (The cell containing 9999 is a "sentinel" cell which marks the end of the linked list.
  ; Looks like implementing this without a sentinel is impossible.)
  
  ; Allocate the head (containing the value 1) - rsi will contain the pointer to the head of the list
  (rax <- (allocate 5 3))
  (rsi <- rax)
  
  ; Allocate the rest of the linked list (2 through 5) in a loop
  
  (rbx <- 5)    ; Loop index
  (rdi <- rsi)  ; rdi stores the address of the previous cell
  
  :allocate_next
  
  ; Allocate a new cell
  (rax <- (allocate 5 rbx))
  (rbx <- (mem rax 4))
  
  ; Link the previous cell to this one
  ((mem rdi 8) <- rax)
  (rdi <- rax)
  (rbx += 2)
  (cjump rbx <= 11 :allocate_next :done_allocating)
  
  :done_allocating
  
  ; Allocate the sentinel cell and set the tail's pointer to it.
  (rax <- (allocate 5 9999))
  ((mem rdi 8) <- rax)
  
  ; Now print the linked list structure, whose head is at rsi
  (rdi <- rsi)
  (call :print_list)
  )
  (:print_list
    ; rdi points to the current cell
	
	; Get the value of the current cell and print it
	(rax <- (mem rdi 4))
	(rax <- (print rax))
	
	; Get the pointer to the next cell and check its value - if it's 9999, it's the sentinel, so stop printing the list.
	(rdi <- (mem rdi 8))
	(rax <- (mem rdi 4))
	(cjump rax = 9999 :done :print_next)
	
	:print_next
	(tail-call :print_list)
	
	:done
	(return)
  )
)
